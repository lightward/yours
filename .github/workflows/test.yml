name: Test

on:
  workflow_call:
    inputs:
      sha:
        required: true
        type: string

permissions:
  contents: read

env:
  RAILS_ENV: test

jobs:
  build:
    name: Build
    secrets: inherit
    uses: ./.github/workflows/fly-build.yml
    with:
      commitish: ${{ inputs.sha }}
      environment: staging

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.sha }}
      # Bundler caching disabled for all jobs: This workflow runs in pull_request_target
      # context where malicious PRs could modify Gemfile/Gemfile.lock to poison the cache.
      # We prioritize security over build speed since test runs are still reasonably fast.
      - name: Install Ruby and gems
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: false
      - name: Install gems
        run: bundle install
      - name: Lint Ruby files
        run: bin/rubocop --parallel --only-recognized-file-types --extra-details --format github --fail-level info

  audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.sha }}
      - name: Install Ruby and gems
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: false
      - name: Install gems
        run: bundle install
      - name: Security audit dependencies
        run: bin/bundler-audit --update
      - name: Security audit application code
        run: bin/brakeman --quiet --confidence-level 1 --format github

  vitest:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.sha }}
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ''
          # Caching explicitly disabled: In pull_request_target workflows, an attacker could modify
          # package.json/package-lock.json to poison the cache, potentially affecting
          # subsequent workflow runs. Since test runs are fast enough without caching,
          # we avoid this risk entirely. We set cache to empty string to prevent implicit
          # package manager detection from enabling caching automatically.
      - name: Install JavaScript dependencies
        run: npm ci
      - name: Run JavaScript tests
        run: npm test

  rspec:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17-alpine
        ports:
          - '5432:5432'
        env:
          POSTGRES_DB: yours_test
          POSTGRES_USER: yours
          POSTGRES_PASSWORD: password

    env:
      DATABASE_URL: 'postgres://yours:password@localhost:5432/yours_test'
      GOOGLE_SIGN_IN_CLIENT_ID: test
      GOOGLE_SIGN_IN_CLIENT_SECRET: test
      LIGHTWARD_AI_API_URL: https://lightward.com/api/chat
      STRIPE_SECRET_KEY: sk_test_fake

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.sha }}
      - name: Install Ruby and gems
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: false
      - name: Install gems
        run: bundle install
      - name: Set up database schema
        run: bin/rails db:schema:load
      - name: Run rspec tests
        run: bin/rspec --format RSpec::Github::Formatter --format documentation --force-color
        env:
          DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL: true
